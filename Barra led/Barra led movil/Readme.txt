# Controlador de LEDs con Raspberry Pi Pico W y Servidor Web

Este proyecto utiliza una Raspberry Pi Pico W para controlar 8 LEDs a trav√©s de una interfaz web moderna y responsiva. El servidor web est√° alojado en la propia Pico W, permitiendo el control desde cualquier dispositivo (tel√©fono, tablet, computadora) conectado a la misma red local.



## üöÄ Caracter√≠sticas Principales

* **Control Remoto v√≠a WiFi**: Maneja los LEDs sin necesidad de conexi√≥n f√≠sica al ordenador.
* **Interfaz Web Intuitiva**: Un teclado num√©rico permite seleccionar entre 8 secuencias de luces predefinidas y detener la animaci√≥n (tecla 9).
* **Servidor As√≠ncrono**: El c√≥digo est√° dise√±ado para manejar peticiones web sin detener las secuencias de LEDs en ejecuci√≥n.
* **Autocontenido**: Tanto el backend (MicroPython) como el frontend (HTML/CSS/JS) residen en la memoria de la Pico W.

---

## üõ†Ô∏è Hardware y Software Necesario

### Hardware
* Raspberry Pi Pico W
* 8 LEDs (cualquier color)
* Protoboard y cables de conexi√≥n (Jumpers)
* 8 Resistencias de 220Œ© (una para cada LED)

### Software
* [Thonny IDE](https://thonny.org/): Recomendado para programar y transferir archivos a la Pico.
* [Visual studio code]
* [Firmware de MicroPython para Pico W](https://micropython.org/download/rp2-pico-w/): Necesario para ejecutar el c√≥digo Python en la placa.

---

## ‚öôÔ∏è C√≥mo Funciona el Proyecto

El sistema se divide en dos componentes principales que se comunican entre s√≠:

1.  **Backend (`main.py` en MicroPython)**: Es el cerebro del proyecto. Se encarga de:
    * Conectarse a la red WiFi y obtener una direcci√≥n IP.
    * Iniciar un servidor web en el puerto 80.
    * Escuchar peticiones entrantes y distinguir si se est√° pidiendo la p√°gina web (`/`) o un comando de control (`/control`).
    * Ejecutar un bucle infinito que actualiza el estado de los LEDs seg√∫n la secuencia seleccionada.

2.  **Frontend (`index.html`)**: Es la interfaz de usuario que se ejecuta en el navegador.
    * Presenta una botonera (keypad) de 3x3.
    * Utiliza **JavaScript** para capturar los clics en los botones.
    * Env√≠a los comandos al backend usando la **API Fetch**, enviando peticiones a URLs relativas como `/control?key=1`.

El flujo de interacci√≥n es el siguiente:
1.  El usuario accede a la IP de la Pico desde su tel√©fono.
2.  El servidor en la Pico responde enviando el archivo `index.html`.
3.  El navegador del usuario renderiza la p√°gina con el teclado num√©rico.
4.  Al presionar un bot√≥n, el JavaScript env√≠a un comando al servidor.
5.  El servidor en la Pico recibe el comando, actualiza su variable de estado (qu√© secuencia ejecutar) y env√≠a una respuesta JSON de confirmaci√≥n.
6.  El bucle principal de la Pico lee esta variable de estado y controla los pines GPIO para crear la animaci√≥n visual en los LEDs.

---

## üìÇ An√°lisis del C√≥digo

### `main.py` (Backend en MicroPython)

El c√≥digo se organiza en las siguientes partes:

* **Configuraci√≥n Inicial**: Se importan las librer√≠as, se definen las credenciales WiFi, se inicializan los 8 pines de los LEDs y se declaran las variables globales de estado (`current_sequence_name`, `sequence_step`, etc.), que act√∫an como la memoria del programa.

* **Funciones de Secuencia (`next_step_*`)**: Cada una de estas funciones es un "fotograma" de una animaci√≥n. No ejecutan la animaci√≥n completa, sino que definen qu√© LEDs deben estar encendidos en un √∫nico paso. El bucle principal las llama repetidamente para crear el efecto de movimiento.

* **Controlador de Comandos (`control_leds`)**: Esta funci√≥n recibe la "tecla" presionada desde la web. Su √∫nica tarea es actualizar la variable global `current_sequence_name` para indicarle al bucle principal qu√© nueva animaci√≥n debe comenzar.

* **Servidor Web (`start_server`)**: Es el coraz√≥n del programa. Contiene un bucle infinito `while True` que realiza dos tareas:
    1.  **Atender Peticiones**: Usa un bloque `try/except` para aceptar conexiones web de forma no bloqueante. Analiza la URL solicitada para determinar si se debe servir el `index.html` o procesar un comando de `/control`.
    2.  **Animar LEDs**: Revisa constantemente si hay una secuencia activa y si ha transcurrido el tiempo (`step_delay`) desde el √∫ltimo paso. Si es as√≠, ejecuta la funci√≥n de secuencia correspondiente.

### `index.html` (Frontend)

Este archivo contiene tres lenguajes:

* **HTML**: Define la estructura de la p√°gina: un contenedor principal, una cabecera y una rejilla (`keypad`) para los botones. Se usan atributos `data-key` para identificar cada bot√≥n num√©rico.

* **CSS**: Se encuentra dentro de la etiqueta `<style>` y se encarga de todo el aspecto visual. Define el tema oscuro, el dise√±o de la botonera y los efectos al presionar un bot√≥n (`:active`).

* **JavaScript**: Est√° dentro de la etiqueta `<script>` y a√±ade toda la interactividad:
    * `addEventListener`: Se asignan escuchadores de eventos a todos los botones para detectar el evento `click`.
    * `async function sendStatus(url)`: Es la funci√≥n clave de comunicaci√≥n. Utiliza `fetch()` para enviar la petici√≥n al servidor de la Pico de forma as√≠ncrona. El uso de **URLs relativas** es crucial, ya que evita tener que escribir la IP de la Pico en el c√≥digo, haci√©ndolo m√°s robusto y portable.

---

## ‚ö†Ô∏è Dificultades y Soluciones durante el Desarrollo

1.  **Problema: Servidor Bloqueante.**
    * **Dificultad**: Un servidor web simple se queda "congelado" esperando una conexi√≥n (`socket.accept()`), lo que detendr√≠a por completo las animaciones de los LEDs.
    * **Soluci√≥n**: Se implement√≥ un servidor **no bloqueante** configurando el socket con `s.setblocking(False)` y envolviendo la l√≥gica de aceptaci√≥n de conexiones en un bloque `try...except OSError`. Esto permite que el bucle principal contin√∫e ejecut√°ndose y animando los LEDs, incluso si no hay peticiones web.

2.  **Problema: IP Din√°mica.**
    * **Dificultad**: La direcci√≥n IP de la Pico puede cambiar, lo que obligar√≠a a modificar el c√≥digo JavaScript constantemente si la IP estuviera escrita directamente en √©l.
    * **Soluci√≥n**: El problema se resolvi√≥ al **alojar el archivo `index.html` en la propia Pico**. Esto permite que el JavaScript use **URLs relativas** (ej. `/control?key=1`). El navegador autom√°ticamente env√≠a la petici√≥n a la misma IP desde la que se carg√≥ la p√°gina, eliminando la necesidad de conocer la IP de antemano.

3.  **Problema: Gesti√≥n de Estado.**
    * **Dificultad**: El servidor necesita una forma de "recordar" qu√© secuencia se est√° ejecutando, separando la l√≥gica de recepci√≥n de comandos de la l√≥gica de animaci√≥n.
    * **Soluci√≥n**: Se utiliz√≥ la variable global `current_sequence_name` en MicroPython como una m√°quina de estados simple. La secci√≥n del servidor que maneja las peticiones web se encarga de *escribir* en esta variable, mientras que la secci√≥n del bucle que anima los LEDs se encarga de *leerla* en cada ciclo para actuar en consecuencia.